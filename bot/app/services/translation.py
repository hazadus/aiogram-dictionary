"""–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π."""

from datetime import datetime
from typing import Sequence, Tuple

from loguru import logger
from sqlalchemy import func, select
from sqlalchemy.ext.asyncio import AsyncSession

from app.db import TranslationDAO
from app.integrations.chatgpt import ChatGPTClient
from app.models import TranslationModel
from app.schemas import TranslationCreateSchema


async def get_translation(
    *,
    session: AsyncSession,
    chatgpt_client: ChatGPTClient,
    source: str,
) -> TranslationModel | None:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É.

    Args:
        session (AsyncSession): –û–±—ä–µ–∫—Ç —Å–µ—Å—Å–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        source (str): –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç.

    Returns:
        TranslationModel | None: –ù–∞–π–¥–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –ø–µ—Ä–µ–≤–æ–¥–∞ –∏–ª–∏ None.
    """
    if source is None:
        return None

    if source.strip() == "":
        return None

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥ –ø–æ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É –≤ –ë–î
    db_translation = await TranslationDAO.find_one_or_none(
        session=session,
        source=source.lower(),
    )

    if db_translation is not None:
        logger.debug(f"–ù–∞–π–¥–µ–Ω –ø–µ—Ä–µ–≤–æ–¥ –≤ –ë–î –¥–ª—è —Ç–µ–∫—Å—Ç–∞: {source}")
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
        db_translation.view_count += 1
        await session.commit()
        await session.refresh(db_translation)
        return db_translation

    # –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ—Ç, —Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ –≤ –ë–î
    translated_text = await chatgpt_client.translate_text(text=source)

    db_translation = await _add_translation(
        session=session,
        source=source,
        translation=translated_text,
    )
    if db_translation is not None:
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ –≤ –ë–î –¥–ª—è —Ç–µ–∫—Å—Ç–∞: {source}")

    return db_translation


async def _add_translation(
    *,
    session: AsyncSession,
    source: str,
    translation: str,
) -> TranslationModel | None:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.

    Args:
        session (AsyncSession): –û–±—ä–µ–∫—Ç —Å–µ—Å—Å–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        source (str): –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç.
        translation (str): –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.

    Returns:
        TranslationModel: –°–æ–∑–¥–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –ø–µ—Ä–µ–≤–æ–¥–∞
    """
    if source is None or translation is None:
        return None

    if source.strip() == "" or translation.strip() == "":
        return None

    translation_obj = TranslationCreateSchema(
        source=source.lower(),
        translation=translation,
        view_count=1,
    )
    db_translation = await TranslationDAO.add(
        session=session,
        obj_in=translation_obj,
    )
    await session.commit()

    if db_translation:
        await session.refresh(db_translation)

    return db_translation


# MARK: Stats
async def get_stats_text(*, session: AsyncSession) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ —Å–ª–æ–≤–∞–º/—Ñ—Ä–∞–∑–∞–º –≤ –ë–î.

    –§–æ—Ä–º–∏—Ä—É–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–≤–æ–¥–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π:
      - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
      - —Å—É–º–º–∞—Ä–Ω—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã
      - —Å—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω–∞ –∑–∞–ø–∏—Å—å
      - —á–∏—Å–ª–æ –∑–∞–ø–∏—Å–µ–π —Å –±–æ–ª–µ–µ —á–µ–º –æ–¥–Ω–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º
      - —Ç–æ–ø-10 –∑–∞–ø–∏—Å–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
      - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
    """

    # –û–±—â–∏–µ –∞–≥—Ä–µ–≥–∞—Ç—ã
    total_count = (
        await session.execute(select(func.count(TranslationModel.id)))
    ).scalar_one()

    total_views = (
        await session.execute(
            select(func.coalesce(func.sum(TranslationModel.view_count), 0))
        )
    ).scalar_one()

    avg_views: float = 0.0
    if total_count and total_count > 0:
        avg_views = float(total_views) / float(total_count)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    popular_count = (
        await session.execute(
            select(func.count(TranslationModel.id)).where(
                TranslationModel.view_count > 1
            )
        )
    ).scalar_one()

    one_view_count = (
        await session.execute(
            select(func.count(TranslationModel.id)).where(
                TranslationModel.view_count == 1
            )
        )
    ).scalar_one()

    popular_pct = (popular_count / total_count * 100.0) if total_count else 0.0
    one_view_pct = (one_view_count / total_count * 100.0) if total_count else 0.0

    # –¢–æ–ø-10 –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º
    top_rows: Sequence[Tuple[str, int]] = (
        await session.execute(
            select(TranslationModel.source, TranslationModel.view_count)
            .order_by(TranslationModel.view_count.desc(), TranslationModel.source.asc())
            .limit(10)
        )
    ).all()

    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–æ–±–∞–≤–ª–µ–Ω–∏–π
    recent_rows: Sequence[Tuple[str, datetime]] = (
        await session.execute(
            select(TranslationModel.source, TranslationModel.created_at)
            .order_by(TranslationModel.created_at.desc())
            .limit(5)
        )
    ).all()

    lines: list[str] = []
    lines.append("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ª–æ–≤")
    lines.append("")
    lines.append(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {int(total_count or 0)}")
    lines.append(f"–°—É–º–º–∞—Ä–Ω—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: {int(total_views or 0)}")
    lines.append(f"–°—Ä–µ–¥–Ω–µ–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω–∞ –∑–∞–ø–∏—Å—å: {avg_views:.2f}")
    lines.append(
        f"–ó–∞–ø–∏—Å–µ–π —Å >1 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º: {int(popular_count or 0)} ({popular_pct:.1f}%)"
    )
    lines.append(
        f"–ó–∞–ø–∏—Å–µ–π —Å 1 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º: {int(one_view_count or 0)} ({one_view_pct:.1f}%)"
    )

    if len(top_rows) > 0:
        lines.append("")
        lines.append("–¢–æ–ø-10 –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º:")
        for idx, (source, views) in enumerate(top_rows, start=1):
            lines.append(f"{idx}. {source} ‚Äî {views}")

    if len(recent_rows) > 0:
        lines.append("")
        lines.append("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:")
        for source, created_at in recent_rows:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º UTC/aware datetime —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ
            try:
                created_str = created_at.astimezone().strftime("%Y-%m-%d %H:%M:%S %Z")
            except Exception:
                created_str = created_at.strftime("%Y-%m-%d %H:%M:%S")
            lines.append(f"- {source} ‚Äî {created_str}")

    return "\n".join(lines)
